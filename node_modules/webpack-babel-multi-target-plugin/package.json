{
  "_args": [
    [
      {
        "raw": "webpack-babel-multi-target-plugin@2.3.3",
        "scope": null,
        "escapedName": "webpack-babel-multi-target-plugin",
        "name": "webpack-babel-multi-target-plugin",
        "rawSpec": "2.3.3",
        "spec": "2.3.3",
        "type": "version"
      },
      "/home/incs83/Swagger"
    ]
  ],
  "_from": "webpack-babel-multi-target-plugin@2.3.3",
  "_hasShrinkwrap": false,
  "_id": "webpack-babel-multi-target-plugin@2.3.3",
  "_location": "/webpack-babel-multi-target-plugin",
  "_nodeVersion": "10.16.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/webpack-babel-multi-target-plugin_2.3.3_1575303999847_0.7402364946872233"
  },
  "_npmUser": {
    "name": "danielschaffer",
    "email": "dan@dandoes.net"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "webpack-babel-multi-target-plugin@2.3.3",
    "scope": null,
    "escapedName": "webpack-babel-multi-target-plugin",
    "name": "webpack-babel-multi-target-plugin",
    "rawSpec": "2.3.3",
    "spec": "2.3.3",
    "type": "version"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/webpack-babel-multi-target-plugin/-/webpack-babel-multi-target-plugin-2.3.3.tgz",
  "_shasum": "d87a6487b76f6ac17c6844bc5819069422373df9",
  "_shrinkwrap": null,
  "_spec": "webpack-babel-multi-target-plugin@2.3.3",
  "_where": "/home/incs83/Swagger",
  "author": {
    "name": "Daniel Schaffer",
    "email": "dan@dandoes.net",
    "url": "https://github.com/DanielSchaffer"
  },
  "bugs": {
    "url": "https://github.com/DanielSchaffer/webpack-babel-multi-target-plugin/issues"
  },
  "dependencies": {
    "@babel/cli": "^7.2.3",
    "@babel/core": "^7.2.2",
    "@babel/plugin-syntax-dynamic-import": "^7.2.0",
    "@babel/plugin-transform-runtime": "^7.2.0",
    "@babel/preset-env": "^7.3.1",
    "@babel/runtime": "^7.3.1",
    "babel-loader": "^8.0.5",
    "core-js": "^2.6.3",
    "html-webpack-plugin": "^3.2.0",
    "tapable": "^1.1.1",
    "webpack-merge": "^4.2.1",
    "webpack-sources": "^1.3.0"
  },
  "description": "A Webpack plugin that works with Babel to allow differential loading - production deployment of ES2015 builds targeted to modern browsers, with an ES5 fallback for legacy browsers.",
  "devDependencies": {
    "@types/babel-core": "^6.25.5",
    "@types/chai": "^4.1.7",
    "@types/compression": "0.0.36",
    "@types/core-js": "^2.5.2",
    "@types/cors": "^2.8.4",
    "@types/html-webpack-plugin": "^3.2.0",
    "@types/jasmine": "^3.3.5",
    "@types/jasminewd2": "^2.0.6",
    "@types/mocha": "^5.2.5",
    "@types/node": "^10.12.18",
    "@types/sinon-chai": "^3.2.2",
    "@types/tapable": "^1.0.4",
    "@types/webpack": "^4.4.23",
    "@types/webpack-dev-middleware": "^2.0.2",
    "@types/webpack-dev-server": "^3.1.1",
    "@types/webpack-merge": "^4.1.3",
    "@types/webpack-sources": "^0.1.5",
    "@typescript-eslint/eslint-plugin": "^2.0.0",
    "@typescript-eslint/parser": "^2.0.0",
    "acorn": "^6.0.5",
    "acorn-dynamic-import": "^4.0.0",
    "browserstack-local": "^1.4.2",
    "chai": "^4.2.0",
    "compression": "^1.7.3",
    "cors": "^2.8.5",
    "coveralls": "^3.0.2",
    "css-loader": "^2.1.0",
    "dotenv": "^6.2.0",
    "eslint": "^5.12.0",
    "eslint-plugin-import": "^2.14.0",
    "eslint-plugin-mocha": "^5.2.0",
    "expose-loader": "^0.7.5",
    "express": "^4.16.4",
    "express-history-api-fallback": "^2.2.1",
    "file-loader": "^3.0.1",
    "hard-source-webpack-plugin": "^0.13.1",
    "html-loader": "^0.5.5",
    "html-webpack-include-assets-plugin": "^1.0.7",
    "html-webpack-plugin": "^3.2.0",
    "jasmine-core": "^3.3.0",
    "jasmine-spec-reporter": "^4.2.1",
    "mini-css-extract-plugin": "^0.5.0",
    "mocha": "^5.2.0",
    "node-sass": "^4.11.0",
    "null-loader": "^0.1.1",
    "nyc": "^13.1.0",
    "protractor": "^5.4.2",
    "pug-html-loader": "^1.1.5",
    "raw-loader": "^1.0.0",
    "rimraf": "^2.6.3",
    "sass-loader": "^7.1.0",
    "sinon": "^7.2.2",
    "sinon-chai": "^3.3.0",
    "to-string-loader": "^1.1.5",
    "ts-custom-error-shim": "^1.0.0-alpha.2",
    "ts-node": "^8.0.1",
    "typescript": "^3.5.3",
    "uglifyjs-webpack-plugin": "^2.1.1",
    "webpack": "^4.29.0",
    "webpack-dev-middleware": "^3.5.1",
    "webpack-dev-server": "^3.1.14"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-MJmv8YcP6ex4UgmFyafe8aTH7J9pcg90gFpeanb/48FRSqRpgdoidqmq3bNzHSvI1nOXeyT3EW2dmLYwMhmm2A==",
    "shasum": "d87a6487b76f6ac17c6844bc5819069422373df9",
    "tarball": "https://registry.npmjs.org/webpack-babel-multi-target-plugin/-/webpack-babel-multi-target-plugin-2.3.3.tgz",
    "fileCount": 84,
    "unpackedSize": 164117,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd5TtACRA9TVsSAnZWagAAJcoQAI/WT7+x5T9c58WopMFa\nqeLLLahzhGIlLjVF0h/t/lITtJlrk/D4fyQ93Kwm1nx7LVUTW7jig+rUc+Za\n+psYgcXREIAFokxAQLfsGm1OxsWAPQlcLSdW9RWq+iL3Xik8GtwDE8wMAqns\nU6rzMKSFhSTtzFSW5kuyPWKYXqnqMNQ7PGPoDP7COJacR/QXFtSZYu3Ctm/c\nF88x0uD5NAJ0VdF2LfHkxZzjdLq6a7IWDEmIZJLp1lYHsTGjZRGs2XzSd+EQ\n3u/UsBgZlSps+3znHyupPv7dHjgzjbeFcjegJwjRtd4G/sIkAuhyHm5skgAf\n+2Xsj/29IhY+d4TLuF18LbnYwo4mpWUjSiN49oyis0XhbLoNN885IRfQwp9d\n7t/BdAUKo4tNlFaYtVPBfxPFiGRA23bvmlqN4lsJA9SOjH22tCrHBlRFCfpk\nbqicTdFgEK0X9ob8aOE8bHx2Utnk3Nvvt1L1u2/Iglz+FoInnMcJC7B5RnyB\n1QGVxFOZ77aeOybVpIHozOr/A2j3DJi8IhqAUB/GKnn1SlB9o/ac6mjuRAyi\nkfwCGKwiZruVhRo2kOwA14nM9ao8dZezF0kjNGBnSg0skXwbPM7rqsDU071E\npNc5R8enT6dLDiKgxd553H6BerzgJHzJLgdUI2deda8Z21t9S5PW1Ft2sDKD\nR8fo\r\n=l8Em\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "*.md",
    "dist/**/*",
    "package.json"
  ],
  "gitHead": "1f9e95dcfc2a60363c33bd8e9f9c69f3952092e0",
  "homepage": "https://github.com/DanielSchaffer/webpack-babel-multi-target-plugin",
  "keywords": [
    "webpack",
    "webpack-plugin",
    "babel",
    "babel-loader",
    "differential-loading",
    "esnext",
    "esmodules",
    "es2015",
    "es2016",
    "es2017",
    "es6",
    "es7"
  ],
  "license": "ISC",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "danielschaffer",
      "email": "dan@dandoes.net"
    }
  ],
  "module": "dist/index.js",
  "name": "webpack-babel-multi-target-plugin",
  "optionalDependencies": {
    "html-webpack-plugin": "^3.2.0"
  },
  "peerDependencies": {
    "html-webpack-plugin": "^3.2.0",
    "webpack": "^4.19.0",
    "webpack-dev-server": "^3.1.0"
  },
  "readme": "# webpack-babel-multi-target-plugin\n\n[![](https://img.shields.io/npm/v/webpack-babel-multi-target-plugin.svg)](https://www.npmjs.com/package/webpack-babel-multi-target-plugin)\n[![](https://img.shields.io/npm/dm/webpack-babel-multi-target-plugin.svg)](https://www.npmjs.com/package/webpack-babel-multi-target-plugin)\n[![BrowserStack Status](https://www.browserstack.com/automate/badge.svg?badge_key=UHB0dnF0cUoyaDJZeVJqOTJDWk1EQjY1NC93d29zaTZEYytJZEt1THhsbz0tLU5EcHhtQzJtaGFUbno3aGd3d1pKN2c9PQ==--7f5b762117052ec52c9b04edff86c01266da5dd0)](https://www.browserstack.com/automate/public-build/UHB0dnF0cUoyaDJZeVJqOTJDWk1EQjY1NC93d29zaTZEYytJZEt1THhsbz0tLU5EcHhtQzJtaGFUbno3aGd3d1pKN2c9PQ==--7f5b762117052ec52c9b04edff86c01266da5dd0)\n[![Build Status](https://travis-ci.org/DanielSchaffer/webpack-babel-multi-target-plugin.svg?branch=master)](https://travis-ci.org/DanielSchaffer/webpack-babel-multi-target-plugin)\n\nThis project, inspired by Phil Walton's article\n[Deploying es2015 Code in Production Today](https://philipwalton.com/articles/deploying-es2015-code-in-production-today/),\nadds tooling to simplify the additional configuration with a\nWebpack plugin, `BabelMultiTargetPlugin`.\n\n# Setup and Configuration\n\n[![NPM](https://nodei.co/npm/webpack-babel-multi-target-plugin.png)](https://npmjs.org/package/webpack-babel-multi-target-plugin)\n\nUsing the plugin requires making a few small changes to your existing webpack configuration:\n\n* Replace any instances of `'babel-loader'` with `BabelMultiTargetPlugin.loader()`\n  * Do not use a `Loader` configuration object here - see [Options Reference](#options-reference)\n  below for information on customizing options for `'babel-loader'`\n  \n* Add a loader rule for `.js` files if there isn't one already:\n```javascript\n{\n  test: /\\.js$/,\n  use: [\n    BabelMultiTargetPlugin.loader(),\n  ],\n},\n```\n_Note:_ The above example intentionally does not exclude _node\\_modules_.\n\n* Set `resolve.mainFields` to favor modern ES modules, which allows webpack to load the most modern source possible.\nThere are several intersecting de-facto standards flying around, so this should cover as much as possible:\n```javascript\nmainFields: [\n\n  // rxjs and Angular Package Format\n  // these are generally shipped as a higher ES language level than `module`\n  'es2015',\n  'esm2015',\n  'fesm2015',\n\n  // current leading de-facto standard - see https://github.com/rollup/rollup/wiki/pkg.module\n  'module',\n\n  // previous de-facto standard, superceded by `module`, but still in use by some packages\n  'jsnext:main',\n\n  // Angular Package Format - lower ES level\n  'esm5',\n  'fesm5',\n\n  // standard package.json fields\n  'browser',\n  'main',\n],\n```\n\n* Add an instance of `BabelMultiTargetPlugin` to the webpack\n configuration's `plugins` property\n\n* `BabelMultiTargetPlugin` does not require any configuration - but can\nbe customized (see [Options Reference](#options-reference) below)\n\n* Remove any `.babelrc` - see [Options Reference](#options-reference) below for setting preset options\n\n* Remove any references to `babel-loader` from your `package.json` - it is a direct dependency of\n  `webpack-babel-multi-target-plugin`, and may cause unexpected issues if there are duplicate instances due to\n  a version mismatch\n  \n* Remove any path or pattern matching _node\\_modules_ from the `exclude`\n  property of any rules using `BabelMultiTargetPlugin.loader()`\n\n* TypeScript\n  * Loader rules must use `BabelMultiTargetPlugin.loader()` after your compiler loader (remember, loaders are run bottom to top)\n  * Set `tsconfig` to `target` es6 or higher\n\n* Vue\n  * Replace `'vue-loader'` with `BabelMultiTargetPlugin.loader('vue-loader')`\n  \n* `expose-loader`\n  * Rules using `expose-loader` must be defined _before_ rules using `BabelMultiTargetPlugin.loader()`\n  * Do not `import`/`require` libraries exposed with `expose-loader` - either reference them from the global scope,\n    or do not use `expose-loader`. You may also need to use Webpack's `ProvidePlugin`.\n\n## Upgrading from v1.x\n\n* Change usages of `BabelMultiTargetPlugin.loader` to `BabelMultiTargetPlugin.loader()`\n\n## Usage with ES6 Dynamic Imports (including Angular \"Lazy\" Routes)\n\nWhen using ES6's `import(...)` syntax, you may use Webpack's built-in chunk naming syntax to control the naming\nof the resulting chunk:\n\n```typescript\nimport(/* webpackChunkName: \"my-dynamic-import\" */'./some-other-module')\n``` \n\nWhen working with imports that use an expression within the import syntax, `BabelMultiTargetPlugin` adds the `[resource]`\ntag to allow better control over the naming of the resulting chunk. The `[resource]` tag will be replaced by the\nrelative path of the imported module, minus the file extension.\n\n```typescript\n/*\n * ./src/\n *   - plugins\n *     - a\n *       plugin.js\n*      - b\n*        plugin.js\n *  \n */\n\n// ./src/loader.js\nimport(/* webpackChunkName: \"[resource]\" */`./plugins/${plugin}/plugin.js`)\n```\n\nIn the above example, the resulting chunks for the plugin files would be (depending on the target configuration):\n* `a-plugin.js` (legacy bundle for `./src/plugins/a/plugin.js`)\n* `a-plugin.modern.js` (modern bundle for `./src/plugins/a/plugin.js`)\n* `b-plugin.js` (legacy bundle for `./src/plugins/b/plugin.js`)\n* `b-plugin.modern.js` (modern bundle for `./src/plugins/b/plugin.js`)\n\n### Naming Angular Lazy Routes\n\nAdding the included `NamedLazyChunksPlugin` will allow similar human-friendly chunk naming for Angular lazy routes:\n\n```javascript\n// webpack.config.js\n\nconst BabelMultiTargetPlugin = require('webpack-babel-multi-target-plugin').BabelMultiTargetPlugin\nconst NamedLazyChunksPlugin =  require('webpack-babel-multi-target-plugin').NamedLazyChunksPlugin\n\nmodule.exports = {\n  ...\n  \n  plugins: [\n    new BabelMultiTargetPlugin(),\n    new NamedLazyChunksPlugin(),\n  ],\n}\n\n```\n\n`NamedLazyChunkPlugin` can also be used with plain ES6 Dynamic Imports as an alternative to Webpack's chunk naming\nsyntax.\n\n## Configuration Defaults\n\n`BabelMultiTargetPlugin` does not require any options to be set. The\ndefault behavior is:\n\n* Generate \"modern\" and \"legacy\" bundles.\n\n* The \"modern\" bundle assets will have their filenames appended with\n`.modern`, while the \"legacy\" bundle assets will remain the same. This\nenables these assets to be deployed without breaking anything since it\nwill still have the required polyfills.\n\n* \"modern\" browsers are the last 2 versions of each browser, excluding\nversions that don't support `<script type=\"module\">`\n\n### Options Reference\n\n* **`babel.plugins`** (`string[]`) - a list of Babel plugins to use. `@babel/plugin-syntax-dynamic-import` is included automatically.\n* **`babel.presetOptions`** (`BabelPresetOptions`) - options passed to `@babel/preset-env`. See Babel's preset-env [options](https://babeljs.io/docs/en/babel-preset-env#options) documentation for more info.\n  * Default: `{ modules: false, useBuiltIns: 'usage' }`\n  * **IMPORTANT:** `modules` is forced to `false` to avoid problems with transformed commonjs modules\n* **`doNotTarget`** (`RegExp[]`) - an array of `RegExp` patterns for modules which\n will be excluded from targeting (see [How It Works](#how-it-works) below)\n* **`exclude`** (`RegExp[]`) - an array of `RegExp` patterns for modules which will\n be excluded from transpiling\n* **`targets`** (`{ [browserProfile: string]: BabelTargetOptions }`) - a\n map of browser profiles to target definitions. This is used to control\n the transpilation for each browser target. See [Configuration Defaults](#configuration-defaults)\n above for default values.\n  * **`targets[browserProfile].key`** (`string`) - Used internally to\n  identify the target, and is appended to the filename of an asset if\n  `tagAssetsWithKey` is set to `true`. Defaults to `browserProfile` if\n  not set.\n  * **`targets[browserProfile].tagAssetsWithKey`** (`boolean`) - Determines whether the\n  `key` is appended to the filename of the target's assets. Defaults to\n  `true` for the \"modern\" target, and `false` for the \"legacy\" target.\n  Only one target can have this property set to `false`.\n  * **`targets[browserProfile].browsers`** Defines the\n   [browserslist](https://babeljs.io/docs/en/babel-preset-env#options) used\n  by `@babel/preset-env` for this target.\n  * **`targets[browserProfile].esModule`** (`boolean`) - Determines whether\n  this target can be referenced by a `<script type=\"module\">` tag. Only\n  one target may have this property set to `true`.\n  * **`targets[browserProfile].noModule`** (`boolean`) - Determines whether\n    this target can be referenced by a `<script nomodule>` tag. Only\n    one target may have this property set to `true`.\n  * **`targets[browserProfile].additionalModules`** (`string[]`) - An optional\n  array of modules that will be prepended to the entry module for the target.\n* **`safari10NoModuleFix`** (`boolean` | `'external'`, `'inline'` | `'inline-data'` | `'inline-data-base64'`) - Embeds a polyfill/workaround\nto allow the `nomodule` attribute to function correctly in Safari 10.1.\nSee #9 for more information.\n  * `false` - disabled (default)\n  * `true` | `'inline'` - adds the nomodule fix in an inline script (`HtmlWebpackPlugin` only)\n  * `'inline-data'` - adds the nomodule fix using a script tag with a data url (`HtmlWebpackPlugin` only)\n  * `'inline-data-base64'` - adds the nomodule fix using a script tag with a base64-encoded data url (`HtmlWebpackPlugin` only)\n  * `'external'` - adds the nomodule fix as a separate file linked with a `<script src>` tag\n\n* **`normalizeModuleIds`**: (`boolean`) - **EXPERIMENTAL**. Removes the babel targeting query from module ids so they\n use what the module id would be without using `BabelMultiTargetPlugin`, and adds a check to webpack's bootstrapping\n code that stops bundle code from executing if it detects that webpack has already been bootstrapped elsewhere.\n This has the effect of preventing duplicate modules from loading in instances where the browser loads both bundles\n (e.g. Safari 10.1).\n\n## Configuration Examples\n\n### Basic Usage\n\n```javascript\n\n// webpack.config.js\n\nconst BabelMultiTargetPlugin = require('webpack-babel-multi-target-plugin').BabelMultiTargetPlugin;\n\nmodule.exports = {\n\n    entry: 'src/main.js',\n\n    resolve: {\n        mainFields: [\n            'es2015',\n            'module',\n            'main',\n        ],\n    },\n\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                use: [\n                    BabelMultiTargetPlugin.loader(),\n                ],\n            },\n        ],\n    },\n\n    plugins: [\n        new BabelMultiTargetPlugin(),\n    ],\n\n};\n```\n\n### TypeScript\n\n```javascript\n\n// webpack.config.js\n\nconst BabelMultiTargetPlugin = require('webpack-babel-multi-target-plugin').BabelMultiTargetPlugin;\n\nmodule.exports = {\n\n    entry: 'src/main.ts',\n\n    resolve: {\n        mainFields: [\n            'es2015',\n            'module',\n            'main',\n        ],\n    },\n\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                use: [\n                    BabelMultiTargetPlugin.loader(),\n                ],\n            },\n            {\n                test: /\\.ts$/,\n                use: [\n                    BabelMultiTargetPlugin.loader(),\n                    'awesome-typescript-loader'\n                ],\n                options: {\n                    useCache: true,\n                    cacheDirectory: 'node_modules/.cache/awesome-typescript-loader',\n                },\n            },\n        ],\n    },\n\n    plugins: [\n        new BabelMultiTargetPlugin(),\n    ],\n\n};\n```\n\n### With Options\n\n```javascript\n\n// webpack.config.js\n\nconst BabelMultiTargetPlugin = require('webpack-babel-multi-target-plugin').BabelMultiTargetPlugin;\n\nmodule.exports = {\n\n    entry: 'src/main.js',\n\n    resolve: {\n        mainFields: [\n            'es2015',\n            'module',\n            'main',\n        ],\n    },\n\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                use: [\n                    BabelMultiTargetPlugin.loader(),\n                ],\n            },\n        ],\n    },\n\n    plugins: [\n        new BabelMultiTargetPlugin({\n\n            babel: {\n                // babel preset-env plugin options go here\n            },\n\n            // excludes the untargetable-library module from being targeted\n            doNotTarget: [\n                /node_modules\\/untargetable-library/,\n            ],\n\n            // excludes the transpiling-trouble module from being transpiled\n            exclude: [\n                /node_modules\\/transpiling-trouble/\n            ],\n\n            // swap which target gets the name appended\n            targets: {\n\n                // results in the \"modern\" bundle being output as main.js\n                // the default is main.modern.js\n                modern: {\n                    tagAssetsWithKey: false,\n                },\n\n                // results in the \"legacy\" bundle being output as main.old-and-broke.js\n                // the default is main.js\n                legacy: {\n                    key: 'old-and-broke',\n                    tagAssetsWithKey: true,\n                },\n            },\n        }),\n    ],\n\n};\n```\n\n### Don't Transpile ES5-only Libraries\n\nSome libraries may cause runtime errors if they are transpiled - often,\nthey will already have been transpiled by Babel as part of the author's\npublishing process. These errors may look like:\n\n> `Cannot assign to read only property 'exports' of object '\\#\\<Object\\>'`\n\nor\n\n> `__webpack_require__(...) is not a function`\n\nThese libraries most likely need to be excluded from Babel's\ntranspilation. While the plugin will automatically attempt to filter out\nCommonJs modules, you can also specify libraries to be excluded in the\n`BabelMultiTargetPlugin` constructor:\n\n```javascript\n\nnew BabelMultiTargetPlugin({\n    exclude: [\n        /node_modules\\/some-es5-library/,\n        /node_modules\\/another-es5-library/,\n    ],\n});\n```\n\n## Example Projects\nSeveral simple use cases are provided to show how the plugin works.\n\n### Install Example Project Dependencies\n```bash\n# installs dependencies for all example projects; requires bash\nnpm run install-examples\n```\n\n### Build the Example Projects\n```bash\n# builds all example projects\nnpm run examples\n\n# build just the specified example projects\nnpm run angular-five typescript-plain\n```\n\n### Example Project Dev Server\n```bash\n# builds and serves all example projects\nnpm start\n\n# builds and serves just the specified example projects\nnpm start angular-five typescript-plain\n```\n\nNote that when running all example projects concurrently, you may need to increase\nNode's memory limit:\n```\nNODE_OPTIONS=\"--max-old-space-size 8192\" npm start\n```\n\nExamples will be available at `http://HOST:PORT/examples/EXAMPLE_NAME`.\n\n## How It Works\n\nThis plugin works by effectively duplicating each entry point, and giving it\na target. Each target corresponds to a browser definition that is passed\nto Babel. As the compilation processes each entry point, the target filters\ndown from the entry point through each of its dependencies. Once the\ncompilation is complete, any CSS outputs are merged into a single\nmodule so they are not duplicated (since CSS will be the same regardless\nof ES supported level). If [HtmlWebpackPlugin](https://github.com/jantimon/html-webpack-plugin)\nis being used, the script tags are updated to use the appropriate\n`type=\"module\"` and `nomodule` attributes.\n\n### Transpiling _node\\_modules_\nIn order to have the greatest possible positive effect, the compilation must\nbe able to start with the high possible ES level of source code. This is why\nthe extra entries were added to the `mainFields` array, and why\n_node\\_modules_ is not excluded from loader rules. This ensures that even\ndependencies can take advantage of being able to be bundled with ES6\nfeatures and syntax, and the more verbose syntax and polyfill-laden\nonly included for legacy browsers.\n\n### Blind Targeting\nIn some circumstances, such as lazy-loaded routes and modules with\nAngular, Vue, and ES6 dynamic imports, it may not be possible to\ndetermine the entry point of a module. In these cases, the plugin will\nassign the module a target on its own. It does this by creating an array\nof the targets, and removing and assigning one target each time it\nencounters a given resource.\n\nIf you encounter a `BlindTargetingError` while attempting to use this\nplugin, please create an issue with a simple reproduction.\n\n## Benefits\n\n* Automatically sets up your index HTML files with both \"modern\" and\n \"legacy\" bundles\n\n* Uses ES2015 source when available, and attempts to automatically avoid\nre-transpiling ES5/CommonJs code\n\n* Avoid using between 30-70 KB of polyfill code on browsers that don't\nneed them (depends on project size and features used)\n\n## Caveats\n* Increased build time - since the plugin duplicates entry points, everything\nhas to be done twice. This can be helped with appropriate cache\nconfigurations where they are available (Babel, TypeScript, etc), but\nit may make sense to avoid using this plugin during development.\n\n* May not play nice with [hard-source-webpack-plugin](https://github.com/mzgoddard/hard-source-webpack-plugin)\n\n* Code Splitting - Since CommonJs dependencies can be shared between\n \"modern\" and \"legacy\" bundles, apps with multiple entries or\n lazy-loaded modules may end up with a large number of \"vendor\" chunks.\n\n* Angular Apps: if a dependency does not provide ES modules and imports `@angular/core` as\na CommonJs dependency (e.g. `require('@angular/core')`), things will break, particularly\nwhen using lazy routing modules.\n\n## Testing\nThe output generated by this plugin is tested on the following browsers courtesy of BrowserStack:\n\n* Chrome\n* Firefox\n* Edge\n* Safari (including 10.1 on Mac OS and 10.3 on iOS)\n* IE 11\n\n<a href=\"https://www.browserstack.com\" target=\"_blank\"><img src=\"./doc/browserstack-logo.svg\" width=\"25%\"></a>\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/DanielSchaffer/webpack-babel-multi-target-plugin.git"
  },
  "scripts": {
    "build": "tsc -p ./tsconfig.build.json",
    "bump-version": "./script/bump_version",
    "copy": "yarn copy:js",
    "copy:js": "rsync -R ./src/**/*.js ./dist",
    "coverage": "nyc npm test",
    "coverage-report": "nyc report --reporter=text-lcov | coveralls",
    "e2e": "TS_NODE_PROJECT=tsconfig.e2e.json TS_NODE_FILES=true DOTENV_CONFIG_PATH=examples/.env node -r dotenv/config -r ts-node/register node_modules/.bin/protractor examples/protractor.conf.js",
    "e2e-ci": "TS_NODE_PROJECT=tsconfig.e2e.json TS_NODE_FILES=true DOTENV_CONFIG_PATH=examples/.env node -r dotenv/config -r ts-node/register node_modules/.bin/protractor examples/protractor.conf.js",
    "example": "ts-node --files -P tsconfig.ts-node.json examples/build",
    "examples": "ts-node --files -P tsconfig.ts-node.json examples/build",
    "install-examples": "sh ./install-examples.sh",
    "lint": "eslint .",
    "lint:fix": "yarn lint -- --fix",
    "postbuild": "yarn copy",
    "prebuild": "rimraf dist",
    "precoverage": "rimraf coverage .nyc_output",
    "start": "ts-node --files -P tsconfig.ts-node.json examples/serve",
    "test": "TS_NODE_PROJECT=tsconfig.spec.json TS_NODE_FILES=true mocha src/**/*.spec.ts"
  },
  "typings": "dist/index.d.ts",
  "version": "2.3.3"
}
